plugins {
    id 'java'
//    id 'org.springframework.boot' version '3.3.4'
//    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.carshop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

//java {
//    toolchain {
////        languageVersion = JavaLanguageVersion.of(17)
//    }
//}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    configureEach {     // 기본 내장되어 있는 logging 모듈은 제외
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
}

// 스프링 클라우드 컨피그 클라이언트 의존성 추가 ( 24.10.18 )
ext {
    set('springCloudVersion',"2021.0.3")
}

bootRun {
    systemProperty 'spring.profiles.active', 'test'
}

// 클라우드 네이티브 빌드팩 설정
// 빌드팩을 사용해 OCI 이미지를 빌드하기 위한 스프링 부트 플러그인 작업
// 추가적으로 (원격)컨테이너 저장소에 저장 가능 (github packages 에 등록됨)
// ./gradlew bootBuildImage --imageName ghcr.io/ilhyuncho/mycarshop
// --publishImage -PregistryUrl='ghcr.io' -PregistryUsername=ilhyuncho
// -PregistryToken=<your_github_token>
bootBuildImage{
    imageName = "${project.name}"
    environment = ["BP_JVM_VERSION" : "17.*"]

    docker{ // 컨테이너 저장소 인증을 설정하기 위한 섹션, 같은 그래들 속성을 통해 전달 됨
        publishRegistry{
            username=project.findProperty("registryUsername")
            password=project.findProperty("registryToken")
            url=project.findProperty("registryUrl")
        }
    }
}


jar {   // executable jar 파일만 생성
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.2.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Thymeleaf layout ( 24.10.17 )
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'
    // Thymeleaf java8time ( 24.10.17 )
    implementation group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-java8time', version: '3.0.4.RELEASE'
    // 리액티브 웹 의존성 WebTestClient 사용을 위해( 24.10.17 )
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    // 스프링 부트 설정 프로세서 의존성 추가 ( 24.10.18 )
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // 스프링 클라우드 컨피그 클라이언트 의존성 추가 ( 24.10.18 )
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    // 스프링 리트라이 의존성 ( 24.10.18 ) - 설정 서버 연결 실패시 재 시도 하도록
    implementation 'org.springframework.retry:spring-retry'

    // 스프링 부트 액추에이터 ( 24.10.19 ) - 최초에는 RefreshScopeRefreshed가 발생 하도록 엔드포인트를 제공 하려고 추가
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Postgre SQL 의존성 추가 ( 24.10.19 ) - 의존성만 추가하고 코드 작업은 x
    runtimeOnly 'org.postgresql:postgresql'

    // log4j2 ( 24.10-26 )
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // swagger ui ( 24.10.26 )
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'

    // modelmapper ( 24.10.26 )
    implementation 'org.modelmapper:modelmapper:3.1.0'

    // AOP 적용 ( 24.10.26 )
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // validation ( 24.10.26 )
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // spring security (24.10.27 )
    implementation 'org.springframework.boot:spring-boot-starter-security'
}

// 스프링 클라우드 컨피그 클라이언트 의존성 추가 ( 24.10.18 )
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
