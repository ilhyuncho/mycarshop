name: Commit Stage    # 워크플로의 이름
on: push  # 새 코드를 저장소로 푸시하면 워크플로 를 시작 함

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ilhyuncho/mycarshop
  VERSION: latest
  AWS_REGION: us-east-1 #리전
  S3_BUCKET_NAME: mycarshop-deploy #버킷 이름
  CODE_DEPLOY_APPLICATION_NAME: mycarshop_codedeploy #CodeDeploy 애플리케이션 이름
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: mycarshop_deployment_group #CodeDeploy 배포 그룹 이름
jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04
    permissions:    # 작업에 부여된 권한
      contents: read    # 현재 깃 저장소를 체크 아웃할 수 있는 권한
      security-events: write  # 깃 허브에 보안 이벤트를 제출할 수 있는 권한
    steps:
      - name: setup mariadb
        uses: YakkaDev/mariadb-actions@v1.1.0
        with:
          version: '10.6.15'
          character: 'utf8mb4'
          database: 'project2db'
          user: 'webuser'
          password: 'abcd1234'
      - name: Checkout source code
        uses: actions/checkout@v3     # 현재 깃 저장소를 체크아웃
      - name: Set up JDK
        uses: actions/setup-java@v3   # 자바 런타임을 설치 하고 설정
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3        # 그라이프를 사용해 취약성을 스캔
        id: scan                            # 현재 단계의 식별자를 할당 하고 이후의 단계에서 참고 할수 있도록
        with:
          path: "${{ github.workspace }}"   # 체크아웃 저장소 패스
          fail-build: false                 # 취약성 발견시 빌드 실패 여부
          severity-cutoff: high             # 오류로 간주할 최소 수준의 보안 유형(낮음, 중간, 높음, 치명적)
          acs-report-enable: true           # 스캔 완료 후 리포트 생성 여부
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v2    #깃허브로 취약성 리포트 전송
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}     # 이전 단계 결과의 리포트를 가져온다
      - name: Build, unit tests and integration tests
        run: |                                    # 윈도우 호환성 해결, 그래들 스크립트를 실행 가능하게 
          chmod +x gradlew          
          ./gradlew build
  package:
    name: Package and Publish
    if: ${{ github.ref == 'refs/heads/master' }}  # 잡을 master 브랜치에 대해서만 실행
    needs: [ build ] # 'build' 잡이 성공적으로 수행된 경우에만 이 잡을 실행
    runs-on: ubuntu-22.04
    permissions:
      contents: read  # 현재 깃 저장소를 체크아웃하기 위한 권한
      packages : write # 깃허브 컨테이너 저장소로 이미지를 업로드하기 위한 권한
      security-events: write  # 깃허브로 보안 이벤트를 제출하기 위한 권한
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4 # 현재 깃 저장소(catalog-service) 를 체크아웃한다.
      - name: Set up JDK
        uses: actions/setup-java@v4  # 자바 런타임을 설치하고 설정한다
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build container image
        run : |
          chmod +x gradlew
          ./gradlew bootBuildImage \
            --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3  # 취약성 검사를 위해 그라이프를 사용해 릴리스 후보 이미지를 스캔한다.
        id: scan
        with: # 스캔할 이미지는 릴리스 후보다.
          image:  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3  # 깃허브로 보안 취약성 리포트를 업로드
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Log into container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # 저장소와 인증하기 위해 필요한 토큰. 깃허브 액션이 제공 함
      - name: Publish container image # 릴리스 후보를 저장소로 푸시
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3
      # (2) application.properties 설정
      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/application.properties
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      - run: cat ./src/main/resources/application.properties
      # (3) gradlew 권한 추가
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew
      # (4) JDK 17 세팅
      - name: Set up JDK
        uses: actions/setup-java@v4  # 자바 런타임을 설치하고 설정한다
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      # (5) Gradle build (Test 제외)
      - name: Build container image
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage \
            --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      # (6) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (7) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .
      # (8) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip